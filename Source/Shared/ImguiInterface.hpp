// Â© 2025 NVIDIA Corporation

#if NRI_ENABLE_IMGUI_EXTENSION
#    if NRI_ENABLE_SHADERMAKE
#        if NRI_ENABLE_D3D11_SUPPORT
#            include "Imgui.fs.dxbc.h"
#            include "Imgui.vs.dxbc.h"
#        endif
#        if NRI_ENABLE_D3D12_SUPPORT
#            include "Imgui.fs.dxil.h"
#            include "Imgui.vs.dxil.h"
#        endif
#        if NRI_ENABLE_VK_SUPPORT
#            include "Imgui.fs.spirv.h"
#            include "Imgui.vs.spirv.h"
#        endif
#    else

// clang-format off
#if NRI_ENABLE_D3D11_SUPPORT

const uint8_t g_Imgui_vs_dxbc[] = {
    68,88,66,67,55,4,158,116,50,65,211,168,227,182,74,113,45,28,109,75,1,0,0,0,172,2,0,0,3,0,0,0,44,0,0,0,156,0,0,0,16,1,0,0,73,83,71,
    78,104,0,0,0,3,0,0,0,8,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,3,0,0,89,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,3,0,0,98,
    0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,15,15,0,0,80,79,83,73,84,73,79,78,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,79,83,71,78,
    108,0,0,0,3,0,0,0,8,0,0,0,80,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,12,0,0,101,
    0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,15,0,0,0,83,86,95,80,79,83,73,84,73,79,78,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,171,
    83,72,69,88,148,1,0,0,80,0,1,0,101,0,0,0,106,8,0,1,89,0,0,4,70,142,32,0,0,0,0,0,1,0,0,0,95,0,0,3,50,16,16,0,0,0,0,0,95,0,0,3,50,16,
    16,0,1,0,0,0,95,0,0,3,242,16,16,0,2,0,0,0,103,0,0,4,242,32,16,0,0,0,0,0,1,0,0,0,101,0,0,3,50,32,16,0,1,0,0,0,101,0,0,3,242,32,16,
    0,2,0,0,0,104,0,0,2,1,0,0,0,56,0,0,8,50,0,16,0,0,0,0,0,70,16,16,0,0,0,0,0,70,128,32,0,0,0,0,0,0,0,0,0,50,0,0,15,50,32,16,0,0,0,0,
    0,70,0,16,0,0,0,0,0,2,64,0,0,0,0,0,64,0,0,0,192,0,0,0,0,0,0,0,0,2,64,0,0,0,0,128,191,0,0,128,63,0,0,0,0,0,0,0,0,54,0,0,8,194,32,16,
    0,0,0,0,0,2,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,63,54,0,0,5,50,32,16,0,1,0,0,0,70,16,16,0,1,0,0,0,54,32,0,5,114,0,16,0,0,0,0,0,
    70,18,16,0,2,0,0,0,47,0,0,5,114,0,16,0,0,0,0,0,70,2,16,0,0,0,0,0,56,0,0,8,114,0,16,0,0,0,0,0,70,2,16,0,0,0,0,0,246,143,32,0,0,0,0,
    0,0,0,0,0,25,0,0,5,114,0,16,0,0,0,0,0,70,2,16,0,0,0,0,0,56,0,0,8,114,32,16,0,2,0,0,0,70,2,16,0,0,0,0,0,166,138,32,0,0,0,0,0,0,0,0,
    0,54,0,0,5,130,32,16,0,2,0,0,0,58,16,16,0,2,0,0,0,62,0,0,1,
};

const uint8_t g_Imgui_fs_dxbc[] = {
    68,88,66,67,36,169,178,81,77,59,111,137,198,5,254,201,9,246,203,154,1,0,0,0,124,1,0,0,3,0,0,0,44,0,0,0,160,0,0,0,212,0,0,0,73,83,
    71,78,108,0,0,0,3,0,0,0,8,0,0,0,80,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,15,0,0,0,92,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,3,0,
    0,101,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,15,15,0,0,83,86,95,80,79,83,73,84,73,79,78,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,
    0,171,79,83,71,78,44,0,0,0,1,0,0,0,8,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,15,0,0,0,83,86,95,84,97,114,103,101,116,0,171,
    171,83,72,69,88,160,0,0,0,80,0,0,0,40,0,0,0,106,8,0,1,90,0,0,3,0,96,16,0,1,0,0,0,88,24,0,4,0,112,16,0,0,0,0,0,85,85,0,0,98,16,0,3,
    50,16,16,0,1,0,0,0,98,16,0,3,242,16,16,0,2,0,0,0,101,0,0,3,242,32,16,0,0,0,0,0,104,0,0,2,1,0,0,0,69,0,0,139,194,0,0,128,67,85,21,
    0,242,0,16,0,0,0,0,0,70,16,16,0,1,0,0,0,70,126,16,0,0,0,0,0,0,96,16,0,1,0,0,0,56,0,0,7,242,32,16,0,0,0,0,0,70,14,16,0,0,0,0,0,70,
    30,16,0,2,0,0,0,62,0,0,1,
};

#endif

#if NRI_ENABLE_D3D12_SUPPORT

const uint8_t g_Imgui_vs_dxil[] = {
    68,88,66,67,78,132,213,141,78,57,54,166,19,63,7,81,10,51,151,1,1,0,0,0,92,10,0,0,6,0,0,0,56,0,0,0,72,0,0,0,208,0,0,0,92,1,0,0,140,
    2,0,0,168,2,0,0,83,70,73,48,8,0,0,0,0,0,0,0,0,0,0,0,73,83,71,49,128,0,0,0,3,0,0,0,8,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,3,0,0,
    0,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,122,0,0,0,0,0,0,0,0,0,0,0,3,0,
    0,0,2,0,0,0,15,15,0,0,0,0,0,0,80,79,83,73,84,73,79,78,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,79,83,71,49,132,0,0,0,3,0,0,0,
    8,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,12,
    0,0,0,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,15,0,0,0,0,0,0,0,83,86,95,80,111,115,105,116,105,111,110,0,84,69,88,
    67,79,79,82,68,0,67,79,76,79,82,0,0,80,83,86,48,40,1,0,0,52,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,
    3,3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,1,0,0,0,24,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,48,0,0,0,0,80,
    79,83,73,84,73,79,78,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,109,97,105,110,0,0,0,
    0,1,0,0,0,0,0,0,0,16,0,0,0,1,0,0,0,0,0,0,0,1,0,66,0,3,0,0,0,10,0,0,0,0,0,0,0,1,1,66,0,3,0,0,0,19,0,0,0,0,0,0,0,1,2,68,0,3,0,0,0,0,
    0,0,0,0,0,0,0,1,0,68,3,3,4,0,0,25,0,0,0,0,0,0,0,1,1,66,0,3,2,0,0,34,0,0,0,0,0,0,0,1,2,68,0,3,2,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,
    0,16,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,72,65,83,72,20,0,0,0,0,0,0,0,83,234,41,28,129,247,8,162,27,227,
    173,236,11,186,3,141,68,88,73,76,172,7,0,0,101,0,1,0,235,1,0,0,68,88,73,76,5,1,0,0,16,0,0,0,148,7,0,0,66,67,192,222,33,12,0,0,226,
    1,0,0,11,130,32,0,2,0,0,0,19,0,0,0,7,129,35,145,65,200,4,73,6,16,50,57,146,1,132,12,37,5,8,25,30,4,139,98,128,20,69,2,66,146,11,66,
    164,16,50,20,56,8,24,75,10,50,82,136,72,144,20,32,67,70,136,165,0,25,50,66,228,72,14,144,145,34,196,80,65,81,129,140,225,131,229,
    138,4,41,70,6,81,24,0,0,8,0,0,0,27,140,224,255,255,255,255,7,64,2,168,13,132,240,255,255,255,255,3,32,109,48,134,255,255,255,255,
    31,0,9,168,0,73,24,0,0,3,0,0,0,19,130,96,66,32,76,8,6,0,0,0,0,137,32,0,0,39,0,0,0,50,34,72,9,32,100,133,4,147,34,164,132,4,147,34,
    227,132,161,144,20,18,76,138,140,11,132,164,76,16,104,35,0,37,0,20,102,0,230,8,192,96,142,0,41,198,32,132,20,66,166,24,128,16,82,
    6,161,50,12,50,72,29,53,92,254,132,61,132,228,115,27,85,172,196,228,23,183,141,136,49,198,160,114,207,112,249,19,246,16,146,31,2,
    205,176,16,40,104,133,96,196,17,122,115,4,65,49,28,41,132,68,146,3,1,87,73,83,68,9,147,47,50,6,133,112,78,35,77,64,51,73,136,24,99,
    140,123,140,63,165,164,131,115,26,105,2,154,73,66,65,37,155,14,100,142,0,20,0,0,19,20,114,192,135,116,96,135,54,104,135,121,104,3,
    114,192,135,13,174,80,14,109,208,14,122,80,14,109,0,15,122,48,7,114,160,7,115,32,7,109,144,14,113,160,7,115,32,7,109,144,14,120,160,
    7,120,208,6,233,16,7,118,160,7,113,96,7,109,144,14,115,32,7,122,48,7,114,208,6,233,96,7,116,160,7,118,64,7,109,96,14,113,96,7,122,
    16,7,118,208,6,230,48,7,114,160,7,115,32,7,109,96,14,118,64,7,122,96,7,116,208,6,238,128,7,122,16,7,118,160,7,115,32,7,122,96,7,116,
    48,228,9,0,0,0,0,0,0,0,0,0,0,96,200,99,0,1,16,0,0,0,0,0,0,0,192,144,7,1,2,64,0,0,0,0,0,0,0,128,33,143,2,4,64,0,0,0,0,0,0,0,0,67,158,
    7,8,128,1,0,0,0,0,0,0,0,134,60,18,16,0,3,0,0,0,0,0,0,0,100,129,0,0,0,17,0,0,0,50,30,152,20,25,17,76,144,140,9,38,71,198,4,67,34,37,
    80,10,37,81,12,35,0,5,82,6,69,80,30,84,74,98,4,160,8,10,161,12,40,23,32,32,32,2,225,177,28,134,9,4,0,128,192,0,0,64,4,132,64,48,0,
    65,129,238,12,0,0,121,24,0,0,100,0,0,0,26,3,76,144,70,2,19,68,143,12,111,236,237,77,12,36,198,5,199,69,166,6,166,198,69,6,7,4,37,
    167,204,76,76,204,102,108,70,38,101,67,16,76,16,8,99,130,64,28,27,132,129,152,32,16,200,6,97,48,40,216,205,77,16,136,100,195,128,
    36,196,4,129,80,38,8,151,69,96,130,64,44,27,144,133,105,150,101,112,128,13,193,179,129,0,0,8,152,32,96,213,134,64,154,32,8,0,137,
    182,176,52,55,34,80,79,83,73,84,73,79,78,19,132,226,153,32,20,208,134,96,153,32,20,209,4,129,96,54,8,219,182,97,89,172,11,203,176,
    65,91,48,142,8,85,17,214,208,211,147,20,209,134,101,240,46,44,195,6,109,192,184,9,2,209,176,24,122,98,122,146,154,32,20,210,4,129,
    112,54,8,219,24,108,88,192,32,12,46,44,195,6,49,0,3,140,12,54,12,221,87,6,92,166,172,190,160,222,230,210,232,210,222,220,38,8,197,
    180,97,89,206,224,66,131,76,12,6,49,88,48,50,216,176,12,222,133,101,218,160,13,24,183,97,1,131,48,184,176,76,27,196,0,12,48,50,216,
    48,164,129,26,172,193,134,193,12,216,0,152,32,100,212,6,97,113,131,13,5,85,181,65,244,6,85,216,216,236,218,92,210,200,202,220,232,
    166,4,65,21,50,60,23,187,50,185,185,180,55,183,41,1,209,132,12,207,197,46,140,205,174,76,110,74,96,212,33,195,115,153,67,11,35,43,
    147,107,122,35,43,99,155,18,36,101,200,240,92,228,202,230,222,234,228,198,202,230,166,4,80,29,50,60,23,187,180,178,187,36,178,41,
    186,48,186,178,41,129,84,135,12,207,165,204,141,78,46,15,234,45,205,141,110,110,74,240,6,0,0,0,121,24,0,0,76,0,0,0,51,8,128,28,196,
    225,28,102,20,1,61,136,67,56,132,195,140,66,128,7,121,120,7,115,152,113,12,230,0,15,237,16,14,244,128,14,51,12,66,30,194,193,29,206,
    161,28,102,48,5,61,136,67,56,132,131,27,204,3,61,200,67,61,140,3,61,204,120,140,116,112,7,123,8,7,121,72,135,112,112,7,122,112,3,
    118,120,135,112,32,135,25,204,17,14,236,144,14,225,48,15,110,48,15,227,240,14,240,80,14,51,16,196,29,222,33,28,216,33,29,194,97,30,
    102,48,137,59,188,131,59,208,67,57,180,3,60,188,131,60,132,3,59,204,240,20,118,96,7,123,104,7,55,104,135,114,104,7,55,128,135,112,
    144,135,112,96,7,118,40,7,118,248,5,118,120,135,119,128,135,95,8,135,113,24,135,114,152,135,121,152,129,44,238,240,14,238,224,14,
    245,192,14,236,48,3,98,200,161,28,228,161,28,204,161,28,228,161,28,220,97,28,202,33,28,196,129,29,202,97,6,214,144,67,57,200,67,57,
    152,67,57,200,67,57,184,195,56,148,67,56,136,3,59,148,195,47,188,131,60,252,130,59,212,3,59,176,195,140,200,33,7,124,112,3,114,16,
    135,115,112,3,123,8,7,121,96,135,112,200,135,119,168,7,122,152,129,60,228,128,15,110,64,15,229,208,14,240,0,0,0,113,32,0,0,23,0,0,
    0,70,176,13,151,239,60,190,16,80,69,65,68,165,3,12,37,97,0,2,230,23,183,109,5,210,112,249,206,227,11,17,1,76,68,8,52,195,66,88,192,
    52,92,190,243,248,139,3,12,98,243,80,147,95,220,182,9,84,195,229,59,143,47,77,78,68,160,212,244,80,147,95,220,182,13,60,195,229,59,
    143,79,53,64,132,249,197,109,27,0,193,0,72,3,97,32,0,0,123,0,0,0,19,4,65,44,16,0,0,0,11,0,0,0,20,71,0,168,148,0,145,178,43,185,66,
    152,1,40,135,114,41,21,26,35,0,99,4,32,8,130,248,47,140,17,128,32,8,226,223,24,1,8,130,32,8,6,0,0,35,6,9,0,130,96,32,125,202,164,
    105,205,136,65,2,128,32,24,24,100,160,96,91,149,140,24,36,0,8,130,129,81,6,75,198,57,202,136,65,2,128,32,24,24,102,192,104,157,181,
    140,24,36,0,8,130,129,113,6,205,230,85,204,136,65,2,128,32,24,24,104,224,140,193,151,53,35,6,9,0,130,96,96,164,193,67,6,96,32,57,
    35,6,9,0,130,96,96,168,1,20,6,97,176,61,35,6,9,0,130,96,96,172,65,36,6,98,64,65,35,6,7,0,130,96,240,164,1,149,140,193,104,66,0,140,
    38,8,129,21,141,124,44,24,228,99,198,35,31,11,8,249,216,48,193,199,38,33,62,163,9,201,48,98,96,0,32,8,6,10,29,104,210,136,129,1,128,
    32,24,40,117,176,73,35,6,6,0,130,96,160,216,1,39,141,24,24,0,8,130,129,114,7,220,48,98,96,0,32,8,6,10,30,116,195,136,129,1,128,32,
    24,40,121,224,13,54,28,242,177,1,145,143,13,137,124,70,12,12,0,4,193,64,233,131,48,24,70,12,12,0,4,193,64,241,3,49,24,70,12,12,0,
    4,193,64,249,131,49,24,70,19,44,193,136,64,62,70,8,242,49,98,144,207,136,65,2,128,32,24,32,165,0,10,125,208,7,119,48,141,24,36,0,
    8,130,1,82,10,160,208,7,125,240,6,210,136,65,2,128,32,24,32,165,0,10,125,208,7,118,112,6,35,6,9,0,130,96,128,148,2,40,244,65,31,208,
    65,25,140,24,36,0,8,130,1,82,10,160,16,10,125,112,7,222,136,65,2,128,32,24,32,165,0,10,161,208,7,111,208,141,24,36,0,8,130,1,82,10,
    160,160,7,125,112,7,195,136,65,2,128,32,24,32,165,0,10,122,208,7,111,32,140,24,36,0,8,130,1,82,10,160,160,7,125,96,7,193,136,65,2,
    128,32,24,32,165,0,10,122,208,7,116,240,33,0,0,0,0,0,
};

const uint8_t g_Imgui_fs_dxil[] = {
    68,88,66,67,74,47,160,220,219,159,163,249,161,133,1,24,57,89,88,94,1,0,0,0,60,9,0,0,6,0,0,0,56,0,0,0,72,0,0,0,212,0,0,0,16,1,0,0,
    32,2,0,0,60,2,0,0,83,70,73,48,8,0,0,0,0,0,0,0,0,0,0,0,73,83,71,49,132,0,0,0,3,0,0,0,8,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,1,0,0,0,3,0,
    0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,
    3,0,0,0,2,0,0,0,15,15,0,0,0,0,0,0,83,86,95,80,111,115,105,116,105,111,110,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,0,79,83,71,
    49,52,0,0,0,1,0,0,0,8,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,64,0,0,0,3,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,83,86,95,84,97,114,103,101,116,0,0,
    0,80,83,86,48,8,1,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,3,1,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,16,0,0,0,2,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,
    24,0,0,0,0,84,69,88,67,79,79,82,68,0,67,79,76,79,82,0,109,97,105,110,0,0,0,0,1,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,1,0,68,3,3,
    4,0,0,1,0,0,0,0,0,0,0,1,1,66,0,3,2,0,0,10,0,0,0,0,0,0,0,1,2,68,0,3,2,0,0,0,0,0,0,0,0,0,0,1,0,68,16,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,72,65,83,72,20,0,0,0,0,0,0,0,157,14,45,232,95,255,10,
    219,36,40,178,85,54,126,10,228,68,88,73,76,248,6,0,0,101,0,0,0,190,1,0,0,68,88,73,76,5,1,0,0,16,0,0,0,224,6,0,0,66,67,192,222,33,
    12,0,0,181,1,0,0,11,130,32,0,2,0,0,0,19,0,0,0,7,129,35,145,65,200,4,73,6,16,50,57,146,1,132,12,37,5,8,25,30,4,139,98,128,20,69,2,
    66,146,11,66,164,16,50,20,56,8,24,75,10,50,82,136,72,144,20,32,67,70,136,165,0,25,50,66,228,72,14,144,145,34,196,80,65,81,129,140,
    225,131,229,138,4,41,70,6,81,24,0,0,8,0,0,0,27,140,224,255,255,255,255,7,64,2,168,13,132,240,255,255,255,255,3,32,109,48,134,255,
    255,255,255,31,0,9,168,0,73,24,0,0,3,0,0,0,19,130,96,66,32,76,8,6,0,0,0,0,137,32,0,0,68,0,0,0,50,34,72,9,32,100,133,4,147,34,164,
    132,4,147,34,227,132,161,144,20,18,76,138,140,11,132,164,76,16,108,35,0,37,0,20,102,0,230,8,192,96,142,0,41,198,32,132,20,66,166,
    24,128,16,82,6,161,155,134,203,159,176,135,144,252,149,144,86,98,242,139,219,70,197,24,99,16,42,247,12,151,63,97,15,33,249,33,208,
    12,11,129,130,85,24,69,24,27,99,12,66,200,160,54,71,16,20,131,145,66,200,35,56,16,48,140,64,12,51,181,193,56,176,67,56,204,195,60,
    184,1,45,148,3,62,208,67,61,200,67,57,200,1,41,240,129,61,148,195,56,208,195,59,200,3,31,152,3,59,188,67,56,208,3,27,128,1,29,248,
    1,24,248,129,30,232,65,59,164,3,60,204,195,47,208,67,62,192,67,57,160,128,204,36,6,227,192,14,225,48,15,243,224,6,180,80,14,248,64,
    15,245,32,15,229,32,7,164,192,7,246,80,14,227,64,15,239,32,15,124,96,14,236,240,14,225,64,15,108,0,6,116,224,7,96,224,7,72,152,148,
    234,77,210,20,81,194,228,179,0,243,44,68,196,78,192,68,160,128,208,77,7,50,71,0,10,0,0,19,20,114,192,135,116,96,135,54,104,135,121,
    104,3,114,192,135,13,174,80,14,109,208,14,122,80,14,109,0,15,122,48,7,114,160,7,115,32,7,109,144,14,113,160,7,115,32,7,109,144,14,
    120,160,7,120,208,6,233,16,7,118,160,7,113,96,7,109,144,14,115,32,7,122,48,7,114,208,6,233,96,7,116,160,7,118,64,7,109,96,14,113,
    96,7,122,16,7,118,208,6,230,48,7,114,160,7,115,32,7,109,96,14,118,64,7,122,96,7,116,208,6,238,128,7,122,16,7,118,160,7,115,32,7,122,
    96,7,116,48,228,9,0,0,0,0,0,0,0,0,0,0,96,200,99,0,1,16,0,0,0,0,0,0,0,192,144,7,1,2,64,0,0,0,0,0,0,0,128,33,79,3,4,192,0,0,0,0,0,0,
    0,0,67,30,8,8,128,1,0,0,0,0,0,0,0,178,64,17,0,0,0,50,30,152,20,25,17,76,144,140,9,38,71,198,4,67,34,37,80,10,37,81,12,35,0,69,80,
    6,229,65,165,36,202,160,16,70,0,138,160,64,72,23,32,32,32,2,225,25,0,202,99,57,12,1,0,0,240,60,0,16,8,4,66,118,6,0,0,0,0,121,24,0,
    0,99,0,0,0,26,3,76,144,70,2,19,68,143,12,111,236,237,77,12,36,198,5,199,69,166,6,166,198,69,6,7,4,37,167,204,76,76,204,102,108,70,
    38,101,67,16,76,16,136,98,130,64,24,27,132,129,152,32,16,199,6,97,48,40,192,205,77,16,8,100,195,128,36,196,4,129,72,38,8,150,69,96,
    130,64,40,27,132,197,216,144,44,76,51,44,131,179,60,27,2,104,130,128,81,27,144,69,106,150,97,88,128,13,193,180,129,136,0,128,154,
    32,100,213,134,192,154,32,8,0,137,182,176,52,55,46,83,86,95,80,111,115,105,116,105,111,110,19,132,162,153,32,20,206,134,96,153,32,
    20,207,4,161,128,54,44,139,182,113,157,55,120,203,7,16,161,42,194,26,122,122,146,34,154,32,20,209,4,129,88,54,8,99,48,6,27,150,33,
    12,182,175,19,131,65,12,134,143,12,88,12,61,49,61,73,77,16,8,102,131,48,6,103,176,97,113,204,96,251,58,49,24,60,231,67,131,13,3,24,
    148,65,26,48,153,178,250,162,10,147,59,43,163,155,32,20,210,134,101,89,131,141,13,186,111,240,150,15,13,54,4,109,176,97,80,3,55,0,
    38,8,218,180,65,88,224,96,67,129,101,111,80,197,65,21,54,54,187,54,151,52,178,50,55,186,41,65,80,133,12,207,197,174,76,110,46,237,
    205,109,74,64,52,33,195,115,177,11,99,179,43,147,155,18,24,117,200,240,92,230,208,194,200,202,228,154,222,200,202,216,166,4,73,25,
    50,60,23,185,178,185,183,58,185,177,178,185,41,1,85,135,12,207,197,46,173,236,46,137,108,138,46,140,174,108,74,96,213,33,195,115,
    41,115,163,147,203,131,122,75,115,163,155,155,18,196,1,0,0,0,121,24,0,0,76,0,0,0,51,8,128,28,196,225,28,102,20,1,61,136,67,56,132,
    195,140,66,128,7,121,120,7,115,152,113,12,230,0,15,237,16,14,244,128,14,51,12,66,30,194,193,29,206,161,28,102,48,5,61,136,67,56,132,
    131,27,204,3,61,200,67,61,140,3,61,204,120,140,116,112,7,123,8,7,121,72,135,112,112,7,122,112,3,118,120,135,112,32,135,25,204,17,
    14,236,144,14,225,48,15,110,48,15,227,240,14,240,80,14,51,16,196,29,222,33,28,216,33,29,194,97,30,102,48,137,59,188,131,59,208,67,
    57,180,3,60,188,131,60,132,3,59,204,240,20,118,96,7,123,104,7,55,104,135,114,104,7,55,128,135,112,144,135,112,96,7,118,40,7,118,248,
    5,118,120,135,119,128,135,95,8,135,113,24,135,114,152,135,121,152,129,44,238,240,14,238,224,14,245,192,14,236,48,3,98,200,161,28,
    228,161,28,204,161,28,228,161,28,220,97,28,202,33,28,196,129,29,202,97,6,214,144,67,57,200,67,57,152,67,57,200,67,57,184,195,56,148,
    67,56,136,3,59,148,195,47,188,131,60,252,130,59,212,3,59,176,195,140,200,33,7,124,112,3,114,16,135,115,112,3,123,8,7,121,96,135,112,
    200,135,119,168,7,122,152,129,60,228,128,15,110,64,15,229,208,14,240,0,0,0,113,32,0,0,18,0,0,0,70,32,13,151,239,60,190,16,17,192,
    68,132,64,51,44,132,5,76,195,229,59,143,191,56,192,32,54,15,53,249,197,109,219,0,52,92,190,243,248,18,192,60,11,225,23,183,109,2,
    213,112,249,206,227,75,147,19,17,40,53,61,212,228,23,183,109,0,4,3,32,13,0,0,97,32,0,0,59,0,0,0,19,4,65,44,16,0,0,0,5,0,0,0,244,70,
    0,136,204,0,20,66,201,21,30,149,18,160,49,3,0,0,0,0,35,6,9,0,130,96,0,105,132,83,85,199,136,65,2,128,32,24,64,91,17,89,26,50,98,144,
    0,32,8,6,198,119,88,23,132,140,24,36,0,8,130,129,1,6,200,133,21,201,136,65,2,128,32,24,24,97,144,96,89,164,140,24,36,0,8,130,129,
    33,6,74,166,85,203,136,65,2,128,32,24,24,99,176,124,27,197,140,24,36,0,8,130,129,65,6,12,24,112,73,51,98,240,0,32,8,6,205,24,44,200,
    33,4,73,210,117,78,50,154,16,0,163,9,66,48,154,48,8,163,9,196,96,196,34,31,35,22,249,24,177,200,199,136,69,62,35,6,9,0,130,96,128,
    180,65,26,152,129,25,124,196,136,65,2,128,32,24,32,109,144,6,102,96,6,211,48,98,144,0,32,8,6,72,27,164,129,25,152,129,39,140,24,36,
    0,8,130,1,210,6,105,96,6,102,16,6,1,2,0,0,0,0,
};

#endif

#if NRI_ENABLE_VK_SUPPORT

const uint8_t g_Imgui_vs_spirv[] = {
    3,2,35,7,0,6,1,0,0,0,14,0,64,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,11,0,6,0,1,0,0,0,71,76,83,76,46,115,116,100,46,52,53,48,0,0,0,0,14,0,
    3,0,0,0,0,0,1,0,0,0,15,0,12,0,0,0,0,0,2,0,0,0,109,97,105,110,0,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,3,0,
    3,0,5,0,0,0,138,2,0,0,5,0,11,0,10,0,0,0,116,121,112,101,46,80,117,115,104,67,111,110,115,116,97,110,116,46,73,109,103,117,105,67,
    111,110,115,116,97,110,116,115,0,0,0,0,6,0,7,0,10,0,0,0,0,0,0,0,105,110,118,68,105,115,112,108,97,121,87,105,100,116,104,0,6,0,8,
    0,10,0,0,0,1,0,0,0,105,110,118,68,105,115,112,108,97,121,72,101,105,103,104,116,0,0,0,0,6,0,6,0,10,0,0,0,2,0,0,0,104,100,114,83,99,
    97,108,101,0,0,0,0,6,0,5,0,10,0,0,0,3,0,0,0,103,97,109,109,97,0,0,0,5,0,6,0,9,0,0,0,103,95,80,117,115,104,67,111,110,115,116,97,110,
    116,115,0,5,0,7,0,3,0,0,0,105,110,46,118,97,114,46,80,79,83,73,84,73,79,78,48,0,0,0,0,5,0,7,0,4,0,0,0,105,110,46,118,97,114,46,84,
    69,88,67,79,79,82,68,48,0,0,0,0,5,0,6,0,5,0,0,0,105,110,46,118,97,114,46,67,79,76,79,82,48,0,0,0,5,0,7,0,7,0,0,0,111,117,116,46,118,
    97,114,46,84,69,88,67,79,79,82,68,48,0,0,0,5,0,6,0,8,0,0,0,111,117,116,46,118,97,114,46,67,79,76,79,82,48,0,0,5,0,4,0,2,0,0,0,109,
    97,105,110,0,0,0,0,71,0,4,0,6,0,0,0,11,0,0,0,0,0,0,0,71,0,4,0,3,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,4,0,0,0,30,0,0,0,1,0,0,0,71,0,4,0,
    5,0,0,0,30,0,0,0,2,0,0,0,71,0,4,0,7,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,8,0,0,0,30,0,0,0,1,0,0,0,72,0,5,0,10,0,0,0,0,0,0,0,35,0,0,0,0,
    0,0,0,72,0,5,0,10,0,0,0,1,0,0,0,35,0,0,0,4,0,0,0,72,0,5,0,10,0,0,0,2,0,0,0,35,0,0,0,8,0,0,0,72,0,5,0,10,0,0,0,3,0,0,0,35,0,0,0,12,
    0,0,0,71,0,3,0,10,0,0,0,2,0,0,0,21,0,4,0,11,0,0,0,32,0,0,0,1,0,0,0,43,0,4,0,11,0,0,0,12,0,0,0,0,0,0,0,43,0,4,0,11,0,0,0,13,0,0,0,
    1,0,0,0,22,0,3,0,14,0,0,0,32,0,0,0,43,0,4,0,14,0,0,0,15,0,0,0,0,0,0,64,43,0,4,0,14,0,0,0,16,0,0,0,0,0,0,192,23,0,4,0,17,0,0,0,14,
    0,0,0,2,0,0,0,44,0,5,0,17,0,0,0,18,0,0,0,15,0,0,0,16,0,0,0,43,0,4,0,14,0,0,0,19,0,0,0,0,0,128,191,43,0,4,0,14,0,0,0,20,0,0,0,0,0,
    128,63,44,0,5,0,17,0,0,0,21,0,0,0,19,0,0,0,20,0,0,0,43,0,4,0,11,0,0,0,22,0,0,0,2,0,0,0,43,0,4,0,14,0,0,0,23,0,0,0,0,0,0,0,23,0,4,
    0,24,0,0,0,14,0,0,0,3,0,0,0,44,0,6,0,24,0,0,0,25,0,0,0,23,0,0,0,23,0,0,0,23,0,0,0,44,0,6,0,24,0,0,0,26,0,0,0,20,0,0,0,20,0,0,0,20,
    0,0,0,43,0,4,0,11,0,0,0,27,0,0,0,3,0,0,0,30,0,6,0,10,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,14,0,0,0,32,0,4,0,28,0,0,0,9,0,0,0,10,0,0,0,
    32,0,4,0,29,0,0,0,1,0,0,0,17,0,0,0,23,0,4,0,30,0,0,0,14,0,0,0,4,0,0,0,32,0,4,0,31,0,0,0,1,0,0,0,30,0,0,0,32,0,4,0,32,0,0,0,3,0,0,
    0,30,0,0,0,32,0,4,0,33,0,0,0,3,0,0,0,17,0,0,0,19,0,2,0,34,0,0,0,33,0,3,0,35,0,0,0,34,0,0,0,32,0,4,0,36,0,0,0,9,0,0,0,14,0,0,0,59,
    0,4,0,28,0,0,0,9,0,0,0,9,0,0,0,59,0,4,0,29,0,0,0,3,0,0,0,1,0,0,0,59,0,4,0,29,0,0,0,4,0,0,0,1,0,0,0,59,0,4,0,31,0,0,0,5,0,0,0,1,0,
    0,0,59,0,4,0,32,0,0,0,6,0,0,0,3,0,0,0,59,0,4,0,33,0,0,0,7,0,0,0,3,0,0,0,59,0,4,0,32,0,0,0,8,0,0,0,3,0,0,0,46,0,3,0,30,0,0,0,37,0,
    0,0,54,0,5,0,34,0,0,0,2,0,0,0,0,0,0,0,35,0,0,0,248,0,2,0,38,0,0,0,61,0,4,0,17,0,0,0,39,0,0,0,3,0,0,0,61,0,4,0,17,0,0,0,40,0,0,0,4,
    0,0,0,61,0,4,0,30,0,0,0,41,0,0,0,5,0,0,0,65,0,5,0,36,0,0,0,42,0,0,0,9,0,0,0,12,0,0,0,61,0,4,0,14,0,0,0,43,0,0,0,42,0,0,0,65,0,5,0,
    36,0,0,0,44,0,0,0,9,0,0,0,13,0,0,0,61,0,4,0,14,0,0,0,45,0,0,0,44,0,0,0,80,0,5,0,17,0,0,0,46,0,0,0,43,0,0,0,45,0,0,0,133,0,5,0,17,
    0,0,0,47,0,0,0,39,0,0,0,46,0,0,0,133,0,5,0,17,0,0,0,48,0,0,0,47,0,0,0,18,0,0,0,129,0,5,0,17,0,0,0,49,0,0,0,48,0,0,0,21,0,0,0,79,0,
    8,0,24,0,0,0,50,0,0,0,41,0,0,0,41,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,12,0,8,0,24,0,0,0,51,0,0,0,1,0,0,0,43,0,0,0,50,0,0,0,25,0,0,0,26,
    0,0,0,65,0,5,0,36,0,0,0,52,0,0,0,9,0,0,0,27,0,0,0,61,0,4,0,14,0,0,0,53,0,0,0,52,0,0,0,80,0,6,0,24,0,0,0,54,0,0,0,53,0,0,0,53,0,0,
    0,53,0,0,0,12,0,7,0,24,0,0,0,55,0,0,0,1,0,0,0,26,0,0,0,51,0,0,0,54,0,0,0,65,0,5,0,36,0,0,0,56,0,0,0,9,0,0,0,22,0,0,0,61,0,4,0,14,
    0,0,0,57,0,0,0,56,0,0,0,79,0,8,0,24,0,0,0,58,0,0,0,55,0,0,0,37,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,142,0,5,0,24,0,0,0,59,0,0,0,58,0,0,0,
    57,0,0,0,79,0,9,0,30,0,0,0,60,0,0,0,41,0,0,0,59,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,3,0,0,0,81,0,5,0,14,0,0,0,61,0,0,0,49,0,0,0,0,0,0,0,
    81,0,5,0,14,0,0,0,62,0,0,0,49,0,0,0,1,0,0,0,80,0,7,0,30,0,0,0,63,0,0,0,61,0,0,0,62,0,0,0,23,0,0,0,20,0,0,0,62,0,3,0,6,0,0,0,63,0,
    0,0,62,0,3,0,7,0,0,0,40,0,0,0,62,0,3,0,8,0,0,0,60,0,0,0,253,0,1,0,56,0,1,0,
};

const uint8_t g_Imgui_fs_spirv[] = {
    3,2,35,7,0,6,1,0,0,0,14,0,28,0,0,0,0,0,0,0,17,0,2,0,1,0,0,0,14,0,3,0,0,0,0,0,1,0,0,0,15,0,10,0,4,0,0,0,1,0,0,0,109,97,105,110,0,0,
    0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,16,0,3,0,1,0,0,0,7,0,0,0,3,0,3,0,5,0,0,0,138,2,0,0,5,0,6,0,7,0,0,0,116,121,112,101,46,
    115,97,109,112,108,101,114,0,0,0,0,5,0,6,0,5,0,0,0,103,76,105,110,101,97,114,67,108,97,109,112,0,0,0,0,5,0,6,0,8,0,0,0,116,121,112,
    101,46,50,100,46,105,109,97,103,101,0,0,0,5,0,3,0,6,0,0,0,116,101,120,0,5,0,7,0,2,0,0,0,105,110,46,118,97,114,46,84,69,88,67,79,79,
    82,68,48,0,0,0,0,5,0,6,0,3,0,0,0,105,110,46,118,97,114,46,67,79,76,79,82,48,0,0,0,5,0,7,0,4,0,0,0,111,117,116,46,118,97,114,46,83,
    86,95,84,97,114,103,101,116,48,0,0,5,0,4,0,1,0,0,0,109,97,105,110,0,0,0,0,5,0,7,0,9,0,0,0,116,121,112,101,46,115,97,109,112,108,101,
    100,46,105,109,97,103,101,0,0,71,0,4,0,2,0,0,0,30,0,0,0,0,0,0,0,71,0,4,0,3,0,0,0,30,0,0,0,1,0,0,0,71,0,4,0,4,0,0,0,30,0,0,0,0,0,0,
    0,71,0,4,0,5,0,0,0,34,0,0,0,0,0,0,0,71,0,4,0,5,0,0,0,33,0,0,0,1,0,0,0,71,0,4,0,6,0,0,0,34,0,0,0,1,0,0,0,71,0,4,0,6,0,0,0,33,0,0,0,
    0,0,0,0,26,0,2,0,7,0,0,0,32,0,4,0,10,0,0,0,0,0,0,0,7,0,0,0,22,0,3,0,11,0,0,0,32,0,0,0,25,0,9,0,8,0,0,0,11,0,0,0,1,0,0,0,2,0,0,0,0,
    0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,32,0,4,0,12,0,0,0,0,0,0,0,8,0,0,0,23,0,4,0,13,0,0,0,11,0,0,0,4,0,0,0,32,0,4,0,14,0,0,0,1,0,0,0,13,0,
    0,0,23,0,4,0,15,0,0,0,11,0,0,0,2,0,0,0,32,0,4,0,16,0,0,0,1,0,0,0,15,0,0,0,32,0,4,0,17,0,0,0,3,0,0,0,13,0,0,0,19,0,2,0,18,0,0,0,33,
    0,3,0,19,0,0,0,18,0,0,0,27,0,3,0,9,0,0,0,8,0,0,0,59,0,4,0,10,0,0,0,5,0,0,0,0,0,0,0,59,0,4,0,12,0,0,0,6,0,0,0,0,0,0,0,59,0,4,0,16,
    0,0,0,2,0,0,0,1,0,0,0,59,0,4,0,14,0,0,0,3,0,0,0,1,0,0,0,59,0,4,0,17,0,0,0,4,0,0,0,3,0,0,0,54,0,5,0,18,0,0,0,1,0,0,0,0,0,0,0,19,0,
    0,0,248,0,2,0,20,0,0,0,61,0,4,0,15,0,0,0,21,0,0,0,2,0,0,0,61,0,4,0,13,0,0,0,22,0,0,0,3,0,0,0,61,0,4,0,8,0,0,0,23,0,0,0,6,0,0,0,61,
    0,4,0,7,0,0,0,24,0,0,0,5,0,0,0,86,0,5,0,9,0,0,0,25,0,0,0,23,0,0,0,24,0,0,0,87,0,6,0,13,0,0,0,26,0,0,0,25,0,0,0,21,0,0,0,0,0,0,0,133,
    0,5,0,13,0,0,0,27,0,0,0,22,0,0,0,26,0,0,0,62,0,3,0,4,0,0,0,27,0,0,0,253,0,1,0,56,0,1,0,
};

#endif

// clang-format on

#    endif

#    include "../Shaders/Imgui.fs.hlsl"
#    include "../Shaders/Imgui.vs.hlsl"

// Copied from Imgui // TODO: always keep in sync with latest

typedef uint16_t ImDrawIdx;
typedef uint64_t ImTextureID;

constexpr ImTextureID ImTextureID_Invalid = 0;

enum ImTextureFormat {
    ImTextureFormat_RGBA32,
    ImTextureFormat_Alpha8,
};

enum ImTextureStatus {
    ImTextureStatus_OK,
    ImTextureStatus_Destroyed,
    ImTextureStatus_WantCreate,
    ImTextureStatus_WantUpdates,
    ImTextureStatus_WantDestroy,
};

template <typename T>
struct ImVector {
    int32_t Size;
    int32_t Capacity;
    T* Data;
};

struct ImVec4 {
    float x, y, z, w;
};

struct ImVec2 {
    float x, y;
};

struct ImDrawVert {
    ImVec2 pos;
    ImVec2 uv;
    uint32_t col;
};

struct ImTextureRect {
    uint16_t x, y, w, h;
};

struct ImTextureData {
    int UniqueID;
    ImTextureStatus Status;
    void* BackendUserData;
    ImTextureID TexID;
    ImTextureFormat Format;
    int Width;
    int Height;
    int BytesPerPixel;
    unsigned char* Pixels;
    ImTextureRect UsedRect;
    ImTextureRect UpdateRect;
    ImVector<ImTextureRect> Updates;
    int UnusedFrames;
    unsigned short RefCount;
    bool UseColors;
    bool WantDestroyNextFrame;
};

struct ImTextureRef {
    ImTextureData* TexData;
    ImTextureID TexID;
};

struct ImDrawCmd {
    ImVec4 ClipRect;
    ImTextureRef TexRef;
    uint32_t VtxOffset;
    uint32_t IdxOffset;
    uint32_t ElemCount;
    void* UserCallback;
    void* UserCallbackData;
    int32_t UserCallbackDataSize;
    int32_t UserCallbackDataOffset;
};

struct ImDrawList {
    ImVector<ImDrawCmd> CmdBuffer;
    ImVector<ImDrawIdx> IdxBuffer;
    ImVector<ImDrawVert> VtxBuffer;

    // rest is unreferenced
};

// Implementation

ImguiImpl::~ImguiImpl() {
    for (auto& entry : m_Textures) {
        m_iCore.DestroyDescriptor(entry.second.descriptor);
        m_iCore.DestroyTexture(entry.second.texture);

        // TODO: need to update "ImTextureData"? saving a pointer to do this is invalid since its memory state is unknown
    }

    for (const ImguiPipeline& entry : m_Pipelines)
        m_iCore.DestroyPipeline(entry.pipeline);

    m_iCore.DestroyPipelineLayout(m_PipelineLayout);
    m_iCore.DestroyDescriptorPool(m_DescriptorPool);
    m_iCore.DestroyDescriptor(m_Sampler);
}

Result ImguiImpl::Create(const ImguiDesc& imguiDesc) {
    { // Get streamer interface
        Result result = nriGetInterface(m_Device, NRI_INTERFACE(StreamerInterface), &m_iStreamer);
        if (result != Result::SUCCESS)
            return result;
    }

    { // Create sampller
        SamplerDesc viewDesc = {};
        viewDesc.filters.min = Filter::LINEAR;
        viewDesc.filters.mag = Filter::LINEAR;
        viewDesc.addressModes.u = AddressMode::REPEAT;
        viewDesc.addressModes.v = AddressMode::REPEAT;

        Result result = m_iCore.CreateSampler(m_Device, viewDesc, m_Sampler);
        if (result != Result::SUCCESS)
            return result;
    }

    { // Pipeline layout
        RootConstantDesc rootConstants = {};
        rootConstants.registerIndex = 0;
        rootConstants.shaderStages = StageBits::VERTEX_SHADER;
        rootConstants.size = sizeof(ImguiConstants);

        const DescriptorRangeDesc descriptorSet0Ranges[] = {
            {1, 1, DescriptorType::SAMPLER, StageBits::FRAGMENT_SHADER},
        };

        const DescriptorRangeDesc descriptorSet1Ranges[] = {
            {0, 1, DescriptorType::TEXTURE, StageBits::FRAGMENT_SHADER, DescriptorRangeBits::ALLOW_UPDATE_AFTER_SET},
        };

        DescriptorSetDesc descriptorSetDescs[2] = {};
        {
            descriptorSetDescs[IMGUI_SAMPLER_SET].registerSpace = IMGUI_SAMPLER_SET;
            descriptorSetDescs[IMGUI_SAMPLER_SET].ranges = descriptorSet0Ranges;
            descriptorSetDescs[IMGUI_SAMPLER_SET].rangeNum = GetCountOf(descriptorSet0Ranges);

            descriptorSetDescs[IMGUI_TEXTURE_SET].registerSpace = IMGUI_TEXTURE_SET;
            descriptorSetDescs[IMGUI_TEXTURE_SET].ranges = descriptorSet1Ranges;
            descriptorSetDescs[IMGUI_TEXTURE_SET].rangeNum = GetCountOf(descriptorSet1Ranges);
            descriptorSetDescs[IMGUI_TEXTURE_SET].flags = DescriptorSetBits::ALLOW_UPDATE_AFTER_SET;
        }

        PipelineLayoutDesc pipelineLayoutDesc = {};
        pipelineLayoutDesc.rootRegisterSpace = 0;
        pipelineLayoutDesc.rootConstants = &rootConstants;
        pipelineLayoutDesc.rootConstantNum = 1;
        pipelineLayoutDesc.descriptorSets = descriptorSetDescs;
        pipelineLayoutDesc.descriptorSetNum = GetCountOf(descriptorSetDescs);
        pipelineLayoutDesc.shaderStages = StageBits::VERTEX_SHADER | StageBits::FRAGMENT_SHADER;
        pipelineLayoutDesc.flags = PipelineLayoutBits::IGNORE_GLOBAL_SPIRV_OFFSETS;

        Result result = m_iCore.CreatePipelineLayout(m_Device, pipelineLayoutDesc, m_PipelineLayout);
        if (result != Result::SUCCESS)
            return result;
    }

    { // Descriptor pool
        DescriptorPoolDesc descriptorPoolDesc = {};

        // Static
        descriptorPoolDesc.descriptorSetMaxNum = 1;
        descriptorPoolDesc.samplerMaxNum = 1;

        // Dynamic
        uint32_t dynamicPoolSize = imguiDesc.descriptorPoolSize ? imguiDesc.descriptorPoolSize : 128;
        m_DescriptorSets1.resize(dynamicPoolSize);

        descriptorPoolDesc.descriptorSetMaxNum += dynamicPoolSize;
        descriptorPoolDesc.textureMaxNum += dynamicPoolSize;
        descriptorPoolDesc.flags = DescriptorPoolBits::ALLOW_UPDATE_AFTER_SET;

        Result result = m_iCore.CreateDescriptorPool(m_Device, descriptorPoolDesc, m_DescriptorPool);
        if (result != Result::SUCCESS)
            return result;
    }

    { // Descriptor sets
        Result result = m_iCore.AllocateDescriptorSets(*m_DescriptorPool, *m_PipelineLayout, IMGUI_SAMPLER_SET, &m_DescriptorSet0_sampler, 1, 0);
        if (result != Result::SUCCESS)
            return result;

        result = m_iCore.AllocateDescriptorSets(*m_DescriptorPool, *m_PipelineLayout, IMGUI_TEXTURE_SET, m_DescriptorSets1.data(), (uint32_t)m_DescriptorSets1.size(), 0);
        if (result != Result::SUCCESS)
            return result;
    }

    { // Update static set with sampler
        UpdateDescriptorRangeDesc updateDescriptorRangeDesc = {m_DescriptorSet0_sampler, 0, 0, &m_Sampler, 1};
        m_iCore.UpdateDescriptorRanges(&updateDescriptorRangeDesc, 1);
    }

    return Result::SUCCESS;
}

void ImguiImpl::CmdCopyData(CommandBuffer& commandBuffer, Streamer& streamer, const CopyImguiDataDesc& copyImguiDataDesc) {
    ExclusiveScope lock(m_Lock);

    if (!copyImguiDataDesc.drawListNum)
        return;

    Scratch<TextureBarrierDesc> textureBarriers = AllocateScratch((DeviceBase&)m_Device, TextureBarrierDesc, copyImguiDataDesc.textureNum);
    uint32_t textureBarrierNum = 0;

    const AccessLayoutStage copyState = {AccessBits::COPY_DESTINATION, Layout::COPY_DESTINATION, StageBits::COPY};
    const AccessLayoutStage drawState = {AccessBits::SHADER_RESOURCE, Layout::SHADER_RESOURCE, StageBits::FRAGMENT_SHADER};

    // Update textures
    for (uint32_t i = 0; i < copyImguiDataDesc.textureNum; i++) {
        ImTextureData* imTextureData = copyImguiDataDesc.textures[i];
        uint64_t key = (uint64_t)imTextureData | ((uint64_t)imTextureData->UniqueID << 54ull);

        ImTextureStatus currentStatus = imTextureData->Status;

        { // Phase 1: satisfy ImGui - naively assumes that the only one device renders a UI instance
            // Destroy
            if (currentStatus == ImTextureStatus_WantDestroy && imTextureData->UnusedFrames > 8) { // TODO: keep an eye on 8...
                imTextureData->TexID = ImTextureID_Invalid;
                imTextureData->BackendUserData = nullptr; // reset counter
                imTextureData->Status = ImTextureStatus_Destroyed;
            }

            // Create or update
            if (currentStatus == ImTextureStatus_WantCreate || currentStatus == ImTextureStatus_WantUpdates) {
                imTextureData->TexID = key;
                imTextureData->BackendUserData = (void*)((uint64_t)imTextureData->BackendUserData + 1); // increment counter
                imTextureData->Status = ImTextureStatus_OK;
            }
        }

        { // Phase 2: real logic - NRI supports rendering of the same UI instance on multiple devices
            auto entry = m_Textures.find(key);
            if (entry == m_Textures.end())
                entry = m_Textures.insert({key, {}}).first;

            ImguiTexture& imguiTexture = entry->second;
            Format format = imTextureData->Format == ImTextureFormat_RGBA32 ? Format::RGBA8_UNORM : Format::R8_UNORM;
            uint64_t updateTick = (uint64_t)imTextureData->BackendUserData;

            // Destroy
            if (updateTick == 0) {
                CHECK(imTextureData->Status == ImTextureStatus_Destroyed, "Unexpected");

                // TODO: this is valid only in the current frame. Otherwise an "ImguiImpl" instance can get a zombie texture in "m_Textures" because
                // starting from the next frame "copyImguiDataDesc.textures" won't contain textures with "ImTextureStatus_Destroyed" status
                m_iCore.DestroyDescriptor(imguiTexture.descriptor);
                m_iCore.DestroyTexture(imguiTexture.texture);

                m_Textures.erase(key);

                continue;
            }

            // A newly added texture requires creation
            if (imguiTexture.updateTick == 0) {
                // Create texture
                ResourceAllocatorInterface iResourceAllocator = {};
                Result result = nriGetInterface(m_Device, NRI_INTERFACE(ResourceAllocatorInterface), &iResourceAllocator);
                CHECK(result == Result::SUCCESS, "Unexpected");

                AllocateTextureDesc textureDesc = {};
                textureDesc.desc.type = TextureType::TEXTURE_2D;
                textureDesc.desc.usage = TextureUsageBits::SHADER_RESOURCE;
                textureDesc.desc.format = format;
                textureDesc.desc.width = (Dim_t)imTextureData->Width;
                textureDesc.desc.height = (Dim_t)imTextureData->Height;
                textureDesc.memoryLocation = MemoryLocation::DEVICE;

                result = iResourceAllocator.AllocateTexture(m_Device, textureDesc, imguiTexture.texture);
                CHECK(result == Result::SUCCESS, "Unexpected");

                // Create descriptor
                Texture2DViewDesc viewDesc = {};
                viewDesc.texture = imguiTexture.texture;
                viewDesc.viewType = Texture2DViewType::SHADER_RESOURCE_2D;
                viewDesc.format = format;

                result = m_iCore.CreateTexture2DView(viewDesc, imguiTexture.descriptor);
                CHECK(result == Result::SUCCESS, "Unexpected");
            }

            // Update if needed
            CHECK(imguiTexture.texture && imguiTexture.descriptor, "Unexpected");

            if (imguiTexture.updateTick < updateTick) {
                const FormatProps& formatProps = GetFormatProps(format);

                if (imguiTexture.updateTick == 0) {
                    // A newly created texture must be fully updated
                    StreamTextureDataDesc streamTextureDataDesc = {};
                    streamTextureDataDesc.data = imTextureData->Pixels;
                    streamTextureDataDesc.dataRowPitch = imTextureData->Width * formatProps.stride;
                    streamTextureDataDesc.dataSlicePitch = imTextureData->Height * streamTextureDataDesc.dataRowPitch;
                    streamTextureDataDesc.dstTexture = imguiTexture.texture;

                    m_iStreamer.StreamTextureData(streamer, streamTextureDataDesc);
                } else if (currentStatus == ImTextureStatus_WantUpdates) {
                    // "Updates" vector is valid only "here and now", i.e. first renderer encountering "ImTextureStatus_WantUpdates" takes it // TODO: improve
                    for (int32_t j = 0; j < imTextureData->Updates.Size; j++) {
                        const ImTextureRect& rect = imTextureData->Updates.Data[j];

                        StreamTextureDataDesc streamTextureDataDesc = {};
                        streamTextureDataDesc.data = imTextureData->Pixels + (rect.x + rect.y * imTextureData->Width) * formatProps.stride;
                        streamTextureDataDesc.dataRowPitch = imTextureData->Width * formatProps.stride;
                        streamTextureDataDesc.dataSlicePitch = imTextureData->Height * streamTextureDataDesc.dataRowPitch;
                        streamTextureDataDesc.dstTexture = imguiTexture.texture;
                        streamTextureDataDesc.dstRegion.x = rect.x;
                        streamTextureDataDesc.dstRegion.y = rect.y;
                        streamTextureDataDesc.dstRegion.width = rect.w;
                        streamTextureDataDesc.dstRegion.height = rect.h;

                        m_iStreamer.StreamTextureData(streamer, streamTextureDataDesc);
                    }
                } else {
                    // If a texture is outdated, use "UsedRect" since "Updates" are valid only in the current frame
                    const ImTextureRect& rect = imTextureData->UsedRect;

                    StreamTextureDataDesc streamTextureDataDesc = {};
                    streamTextureDataDesc.data = imTextureData->Pixels + (rect.x + rect.y * imTextureData->Width) * formatProps.stride;
                    streamTextureDataDesc.dataRowPitch = imTextureData->Width * formatProps.stride;
                    streamTextureDataDesc.dataSlicePitch = imTextureData->Height * streamTextureDataDesc.dataRowPitch;
                    streamTextureDataDesc.dstTexture = imguiTexture.texture;
                    streamTextureDataDesc.dstRegion.x = rect.x;
                    streamTextureDataDesc.dstRegion.y = rect.y;
                    streamTextureDataDesc.dstRegion.width = rect.w;
                    streamTextureDataDesc.dstRegion.height = rect.h;

                    m_iStreamer.StreamTextureData(streamer, streamTextureDataDesc);
                }

                { // Add a barrier
                    TextureBarrierDesc& textureBarrier = textureBarriers[textureBarrierNum++];

                    textureBarrier = {};
                    textureBarrier.texture = imguiTexture.texture;
                    textureBarrier.before = drawState;
                    textureBarrier.after = copyState;

                    if (imguiTexture.updateTick == 0)
                        textureBarrier.before = {};
                }

                // Mark as "up to date"
                imguiTexture.updateTick = updateTick;
            }
        }
    }

    { // Stream buffer data
        uint32_t dataChunkNum = copyImguiDataDesc.drawListNum * 2;
        Scratch<DataSize> dataChunks = AllocateScratch((DeviceBase&)m_Device, DataSize, dataChunkNum);

        StreamBufferDataDesc streamBufferDataDesc = {};
        streamBufferDataDesc.dataChunkNum = dataChunkNum;
        streamBufferDataDesc.dataChunks = dataChunks;
        streamBufferDataDesc.placementAlignment = 4;

        uint64_t totalVertexDataSize = 0;
        for (uint32_t n = 0; n < copyImguiDataDesc.drawListNum; n++) {
            const ImDrawList* imDrawList = copyImguiDataDesc.drawLists[n];

            DataSize& vertexDataChunk = dataChunks[n];
            vertexDataChunk.data = imDrawList->VtxBuffer.Data;
            vertexDataChunk.size = imDrawList->VtxBuffer.Size * sizeof(ImDrawVert);

            DataSize& indexDataChunk = dataChunks[copyImguiDataDesc.drawListNum + n];
            indexDataChunk.data = imDrawList->IdxBuffer.Data;
            indexDataChunk.size = imDrawList->IdxBuffer.Size * sizeof(ImDrawIdx);

            totalVertexDataSize += vertexDataChunk.size;
        }

        BufferOffset bufferOffset = m_iStreamer.StreamBufferData(streamer, streamBufferDataDesc);

        m_VbOffset = bufferOffset.offset;
        m_IbOffset = m_VbOffset + totalVertexDataSize;
        m_CurrentBuffer = bufferOffset.buffer;
    }

    // Copy texture data
    if (textureBarrierNum) {
        BarrierDesc barrierDesc = {};
        barrierDesc.textureNum = textureBarrierNum;
        barrierDesc.textures = textureBarriers;

        m_iCore.CmdBarrier(commandBuffer, barrierDesc);

        m_iStreamer.CmdCopyStreamedData(commandBuffer, streamer);

        for (uint32_t i = 0; i < textureBarrierNum; i++) {
            textureBarriers[i].before = copyState;
            textureBarriers[i].after = drawState;
        }

        m_iCore.CmdBarrier(commandBuffer, barrierDesc);
    }
}

void ImguiImpl::CmdDraw(CommandBuffer& commandBuffer, const DrawImguiDesc& drawImguiDesc) {
    ExclusiveScope lock(m_Lock);

    if (!drawImguiDesc.drawListNum)
        return;

    // Pipeline
    Pipeline* pipeline = nullptr;
    for (size_t i = 0; i < m_Pipelines.size(); i++) {
        const ImguiPipeline& imguiPipeline = m_Pipelines[i];
        if (imguiPipeline.format == drawImguiDesc.attachmentFormat) {
            pipeline = m_Pipelines[i].pipeline;
            break;
        }
    }

    if (!pipeline) {
        const DeviceDesc& deviceDesc = m_iCore.GetDeviceDesc(m_Device);
        MaybeUnused(deviceDesc);

        ShaderDesc shaders[] = {
            {StageBits::VERTEX_SHADER, nullptr, 0},
            {StageBits::FRAGMENT_SHADER, nullptr, 0},
        };

#    if NRI_ENABLE_D3D11_SUPPORT
        if (deviceDesc.graphicsAPI == GraphicsAPI::D3D11) {
            shaders[0].bytecode = g_Imgui_vs_dxbc;
            shaders[0].size = sizeof(g_Imgui_vs_dxbc);

            shaders[1].bytecode = g_Imgui_fs_dxbc;
            shaders[1].size = sizeof(g_Imgui_fs_dxbc);
        }
#    endif
#    if NRI_ENABLE_D3D12_SUPPORT
        if (deviceDesc.graphicsAPI == GraphicsAPI::D3D12) {
            shaders[0].bytecode = g_Imgui_vs_dxil;
            shaders[0].size = sizeof(g_Imgui_vs_dxil);

            shaders[1].bytecode = g_Imgui_fs_dxil;
            shaders[1].size = sizeof(g_Imgui_fs_dxil);
        }
#    endif
#    if NRI_ENABLE_VK_SUPPORT
        if (deviceDesc.graphicsAPI == GraphicsAPI::VK) {
            shaders[0].bytecode = g_Imgui_vs_spirv;
            shaders[0].size = sizeof(g_Imgui_vs_spirv);

            shaders[1].bytecode = g_Imgui_fs_spirv;
            shaders[1].size = sizeof(g_Imgui_fs_spirv);
        }
#    endif

        const VertexAttributeDesc vertexAttributeDesc[] = {
            {{"POSITION", 0}, {0}, GetOffsetOf(&ImDrawVert::pos), Format::RG32_SFLOAT},
            {{"TEXCOORD", 0}, {1}, GetOffsetOf(&ImDrawVert::uv), Format::RG32_SFLOAT},
            {{"COLOR", 0}, {2}, GetOffsetOf(&ImDrawVert::col), Format::RGBA8_UNORM},
        };

        VertexStreamDesc stream = {};
        stream.bindingSlot = 0;

        VertexInputDesc vertexInput = {};
        vertexInput.attributes = vertexAttributeDesc;
        vertexInput.attributeNum = (uint8_t)GetCountOf(vertexAttributeDesc);
        vertexInput.streams = &stream;
        vertexInput.streamNum = 1;

        ColorAttachmentDesc colorAttachment = {};
        colorAttachment.format = drawImguiDesc.attachmentFormat;
        colorAttachment.colorBlend.srcFactor = BlendFactor::SRC_ALPHA,
        colorAttachment.colorBlend.dstFactor = BlendFactor::ONE_MINUS_SRC_ALPHA,
        colorAttachment.colorBlend.op = BlendOp::ADD,
        colorAttachment.alphaBlend.srcFactor = BlendFactor::ONE_MINUS_SRC_ALPHA,
        colorAttachment.alphaBlend.dstFactor = BlendFactor::ZERO,
        colorAttachment.alphaBlend.op = BlendOp::ADD,
        colorAttachment.colorWriteMask = ColorWriteBits::RGB;
        colorAttachment.blendEnabled = true;

        GraphicsPipelineDesc graphicsPipelineDesc = {};
        graphicsPipelineDesc.pipelineLayout = m_PipelineLayout;
        graphicsPipelineDesc.vertexInput = &vertexInput;
        graphicsPipelineDesc.inputAssembly.topology = Topology::TRIANGLE_LIST;
        graphicsPipelineDesc.rasterization.fillMode = FillMode::SOLID;
        graphicsPipelineDesc.rasterization.cullMode = CullMode::NONE;
        graphicsPipelineDesc.outputMerger.colors = &colorAttachment;
        graphicsPipelineDesc.outputMerger.colorNum = 1;
        graphicsPipelineDesc.shaders = shaders;
        graphicsPipelineDesc.shaderNum = GetCountOf(shaders);

        Result result = m_iCore.CreateGraphicsPipeline(m_Device, graphicsPipelineDesc, pipeline);
        CHECK(result == Result::SUCCESS, "Unexpected");

        m_Pipelines.push_back({pipeline, drawImguiDesc.attachmentFormat});
    }

    // Setup
    float defaultHdrScale = drawImguiDesc.hdrScale == 0.0f ? 1.0f : drawImguiDesc.hdrScale;

    m_iCore.CmdSetDescriptorPool(commandBuffer, *m_DescriptorPool);
    m_iCore.CmdSetPipelineLayout(commandBuffer, BindPoint::GRAPHICS, *m_PipelineLayout);
    m_iCore.CmdSetPipeline(commandBuffer, *pipeline);
    m_iCore.CmdSetIndexBuffer(commandBuffer, *m_CurrentBuffer, m_IbOffset, IndexType::UINT16);

    SetDescriptorSetDesc samplerBindingDesc = {IMGUI_SAMPLER_SET, m_DescriptorSet0_sampler};
    m_iCore.CmdSetDescriptorSet(commandBuffer, samplerBindingDesc);

    VertexBufferDesc vertexBufferDesc = {};
    vertexBufferDesc.buffer = m_CurrentBuffer;
    vertexBufferDesc.offset = m_VbOffset;
    vertexBufferDesc.stride = sizeof(ImDrawVert);

    m_iCore.CmdSetVertexBuffers(commandBuffer, 0, &vertexBufferDesc, 1);

    Viewport viewport = {};
    viewport.x = 0.0f;
    viewport.y = 0.0f;
    viewport.width = drawImguiDesc.displaySize.w;
    viewport.height = drawImguiDesc.displaySize.h;
    viewport.depthMin = 0.0f;
    viewport.depthMax = 1.0f;

    m_iCore.CmdSetViewports(commandBuffer, &viewport, 1);

    ImguiConstants constants = {};
    constants.hdrScale = defaultHdrScale;
    constants.invDisplayWidth = 1.0f / viewport.width;
    constants.invDisplayHeight = 1.0f / viewport.height;
    constants.gamma = drawImguiDesc.linearColor ? 2.2f : 1.0f;

    SetRootConstantsDesc setRootConstantsDesc = {0, &constants, sizeof(constants)};
    m_iCore.CmdSetRootConstants(commandBuffer, setRootConstantsDesc);

    // For each draw list
    Descriptor* currentDescriptor = nullptr;
    float currentHdrScale = -1.0f;
    float hdrScale = 0.0f;
    uint32_t vertexOffset = 0;
    uint32_t indexOffset = 0;

    for (uint32_t n = 0; n < drawImguiDesc.drawListNum; n++) {
        const ImDrawList* imDrawList = drawImguiDesc.drawLists[n];

        // For each draw command
        for (int32_t i = 0; i < imDrawList->CmdBuffer.Size; i++) {
            const ImDrawCmd& drawCmd = imDrawList->CmdBuffer.Data[i];
            ImVec4 clipRect = drawCmd.ClipRect; // min.x, min.y, max.x, max.y

            // VK doesn't allow negative values
            clipRect.x = std::max(clipRect.x, 0.0f);
            clipRect.y = std::max(clipRect.y, 0.0f);

            // Clipped?
            if (clipRect.z <= clipRect.x || clipRect.w <= clipRect.y)
                continue;

            if (drawCmd.UserCallback) {
                // Nothing to render, just update HDR scale
                hdrScale = *(float*)&drawCmd.UserCallbackData;
            } else {
                // Change HDR scale
                if (hdrScale != currentHdrScale) {
                    currentHdrScale = hdrScale;

                    constants.hdrScale = currentHdrScale == 0.0f ? defaultHdrScale : currentHdrScale;

                    m_iCore.CmdSetRootConstants(commandBuffer, setRootConstantsDesc);
                }

                // Change texture
                Descriptor* descriptor = nullptr;
                if (drawCmd.TexRef.TexData) {
                    // Font atlas texture
                    ImTextureID key = drawCmd.TexRef.TexData->TexID;
                    descriptor = m_Textures[key].descriptor;
                } else {
                    // User passed texture
                    descriptor = (Descriptor*)drawCmd.TexRef.TexID;
                }

                if (descriptor != currentDescriptor) {
                    currentDescriptor = descriptor;

                    DescriptorSet* descriptorSet = m_DescriptorSets1[m_DescriptorSetIndex];
                    m_DescriptorSetIndex = (m_DescriptorSetIndex + 1) % m_DescriptorSets1.size();

                    SetDescriptorSetDesc textureBindingDesc = {IMGUI_TEXTURE_SET, descriptorSet};
                    m_iCore.CmdSetDescriptorSet(commandBuffer, textureBindingDesc);

                    UpdateDescriptorRangeDesc updateDescriptorRangeDesc = {descriptorSet, 0, 0, &currentDescriptor, 1};
                    m_iCore.UpdateDescriptorRanges(&updateDescriptorRangeDesc, 1);
                }

                // Draw
                DrawIndexedDesc drawIndexedDesc = {};
                drawIndexedDesc.indexNum = drawCmd.ElemCount;
                drawIndexedDesc.instanceNum = 1;
                drawIndexedDesc.baseIndex = drawCmd.IdxOffset + indexOffset;
                drawIndexedDesc.baseVertex = drawCmd.VtxOffset + vertexOffset;

                Rect rect = {
                    (int16_t)clipRect.x,
                    (int16_t)clipRect.y,
                    (Dim_t)(clipRect.z - clipRect.x),
                    (Dim_t)(clipRect.w - clipRect.y),
                };

                m_iCore.CmdSetScissors(commandBuffer, &rect, 1);
                m_iCore.CmdDrawIndexed(commandBuffer, drawIndexedDesc);
            }
        }

        vertexOffset += imDrawList->VtxBuffer.Size;
        indexOffset += imDrawList->IdxBuffer.Size;
    }
}

#endif
